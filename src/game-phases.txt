ONE LINE FOR RED AND NEXT PLAY RED d6 BLACK e3 TO LET BLACK HAVE 1 LINE
% initial_state/2 - Sets up the initial game state with 18 pieces per player
% Initial state changed for debugging issues
initial_state([Player1, Player2], game_state(first_stage, Board, Player1, [6, 7], [[a1, b2, c3]], 0)) :-
    % Initialize the board with empty positions
    Board = [
        a1-red, d1-pressed, g1-black, 
        b2-red, d2-black, f2-black, 
        c3-red, d3-black, e3-empty,
        a4-red, b4-red, c4-black, e4-red, f4-black, g4-red, 
        c5-red, d5-black, e5-red,
        b6-black, d6-empty, f6-red, 
        a7-black, d7-red, g7-black
    ].

NO LINES AND NO PRESSED
% initial_state/2 - Sets up the initial game state with 18 pieces per player
% Initial state changed for debugging issues
initial_state([Player1, Player2], game_state(first_stage, Board, Player1, [7, 7], [], 0)) :-
    % Initialize the board with empty positions
    Board = [
        a1-red, d1-red, g1-black, 
        b2-black, d2-black, f2-red, 
        c3-red, d3-black, e3-empty,
        a4-black, b4-red, c4-black, e4-red, f4-black, g4-red, 
        c5-red, d5-black, e5-red,
        b6-black, d6-empty, f6-red, 
        a7-black, d7-red, g7-black
    ].

RED PLAYS AND GETS 2 PRESS MOVES
% initial_state/2 - Sets up the initial game state with 18 pieces per player
% Initial state changed for debugging issues
initial_state([Player1, Player2], game_state(first_stage, Board, Player1, [14, 14], [], 0)) :-
    % Initialize the board with empty positions
    Board = [
        a1-red, d1-black, g1-empty, 
        b2-empty, d2-black, f2-empty, 
        c3-black, d3-empty, e3-black,
        a4-red, b4-empty, c4-empty, e4-empty, f4-empty, g4-empty, 
        c5-red, d5-empty, e5-empty,
        b6-red, d6-empty, f6-empty, 
        a7-empty, d7-empty, g7-empty
    ].

SECOND STAGE LOOP
% initial_state/2 - Sets up the initial game state with 18 pieces per player
% Initial state changed for debugging issues
initial_state([Player1, Player2], game_state(second_stage, Board, Player2, [11, 11], [], 0)) :-
    % Initialize the board with empty positions
    Board = [
        a1-empty, d1-red, g1-empty, 
        b2-black, d2-black, f2-red, 
        c3-red, d3-black, e3-black,
        a4-black, b4-red, c4-black, e4-red, f4-black, g4-red, 
        c5-red, d5-black, e5-red,
        b6-black, d6-red, f6-red, 
        a7-black, d7-red, g7-black
    ].

GAME OVER WINNER BLACK 
% initial_state/2 - Sets up the initial game state with 18 pieces per player
% Initial state changed for debugging issues
initial_state([Player1, Player2], game_state(second_stage, Board, Player2, [1, 3], [], 0)) :-
    % Initialize the board with empty positions
    Board = [
        a1-empty, d1-empty, g1-empty, 
        b2-black, d2-empty, f2-red, 
        c3-empty, d3-empty, e3-empty,
        a4-black, b4-empty, c4-empty, e4-empty, f4-empty, g4-empty, 
        c5-empty, d5-empty, e5-empty,
        b6-empty, d6-empty, f6-empty, 
        a7-black, d7-empty, g7-empty
    ].


GAME OVER FOR BLACK THE MOMENT IT STARTS 2ND STAGE (NO MOVES POSSIBLE)
IF RED PLAYS e3, PRESS DOWN g7, BLACK PLAYS d6.

% initial_state/2 - Sets up the initial game state with 18 pieces per player
% Initial state changed for debugging issues
initial_state([Player1, Player2], game_state(first_stage, Board, Player1, [7, 7], [], 0)) :-
    % Initialize the board with empty positions
    Board = [
        a1-red, d1-red, g1-black, 
        b2-black, d2-black, f2-red, 
        c3-red, d3-black, e3-empty,
        a4-black, b4-red, c4-black, e4-red, f4-black, g4-red, 
        c5-red, d5-black, e5-red,
        b6-black, d6-empty, f6-red, 
        a7-black, d7-red, g7-black
    ].